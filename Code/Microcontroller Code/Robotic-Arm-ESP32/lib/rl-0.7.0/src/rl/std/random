//
// Copyright (c) 2009, Markus Rickert
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#ifndef RL_STD_RANDOM
#define RL_STD_RANDOM

#if defined(_MSC_VER) && _MSC_VER >= 1600
#include <../include/random>
#else // _MSC_VER
#include_next <random>

#if __GNUC__ == 4 && __GNUC_MINOR__ < 5 && !__clang__
namespace std
{
	template<typename IntType = int>
	class uniform_int_distribution : public uniform_int< IntType >
	{
	public:
		explicit uniform_int_distribution(IntType min = 0, IntType max = 9) :
			uniform_int<IntType>(min, max)
		{
		}
	};
	
	template<typename RealType = double>
	class uniform_real_distribution : public uniform_real< RealType >
	{
	public:
		explicit uniform_real_distribution(RealType min = RealType(0), RealType max = RealType(1)) :
			uniform_real<RealType>(min, max)
		{
		}
	};
}
#endif // __GNUC__
#endif // _MSC_VER

#endif // RL_STD_RANDOM
