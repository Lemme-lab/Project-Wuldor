//
// Copyright (c) 2009, Markus Rickert
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//

#ifndef RL_STD_MUTEX
#define RL_STD_MUTEX

#if defined(_MSC_FULL_VER) && _MSC_FULL_VER >= 190023918
#include <../include/mutex>
#elif defined(_MSC_VER)
#include <boost/thread/locks.hpp>
#include <boost/thread/mutex.hpp>
#include <boost/thread/once.hpp>
#include <boost/thread/recursive_mutex.hpp>

namespace std
{
	using ::boost::adopt_lock;
	
	using ::boost::adopt_lock_t;
	
	using ::boost::call_once;
	
	using ::boost::defer_lock;
	
	using ::boost::defer_lock_t;
	
	using ::boost::lock;
	
	using ::boost::lock_guard;
	
	using ::boost::mutex;
	
	using ::boost::once_flag;
	
	using ::boost::recursive_mutex;
	
	using ::boost::recursive_timed_mutex;
	
	using ::boost::timed_mutex;
	
	using ::boost::try_lock;
	
	using ::boost::try_to_lock;
	
	using ::boost::try_to_lock_t;
	
	using ::boost::unique_lock;
}
#else // _MSC_VER
#include_next <mutex>
#endif // _MSC_VER

#endif // RL_STD_MUTEX
